// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NipedWebApi.Data;

#nullable disable

namespace NipedWebApi.Migrations
{
    [DbContext(typeof(NipedDbContext))]
    [Migration("20250809224655_MIGRATION-NAME3")]
    partial class MIGRATIONNAME3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NipedWebApi.Data.Model.Bloodwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BloodPressureDiastolic")
                        .HasColumnType("int");

                    b.Property<int>("BloodPressureSystolic")
                        .HasColumnType("int");

                    b.Property<int>("BloodSugar")
                        .HasColumnType("int");

                    b.Property<int>("CholesterolHdl")
                        .HasColumnType("int");

                    b.Property<int>("CholesterolLdl")
                        .HasColumnType("int");

                    b.Property<int>("CholesterolTotal")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Bloodworks");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.CholesterolGuideline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GuidelineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GuidelineId")
                        .IsUnique();

                    b.ToTable("CholesterolGuidelines");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.Guideline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Guidelines");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DietQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseWeeklyMinutes")
                        .HasColumnType("int");

                    b.Property<string>("SleepQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StressLevels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.ValueGuideline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CholesterolGuidelineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeedsAttention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Optimal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriousIssue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CholesterolGuidelineId");

                    b.ToTable("ValueGuidelines");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.Bloodwork", b =>
                {
                    b.HasOne("NipedWebApi.Data.Model.Client", "Client")
                        .WithOne("Bloodwork")
                        .HasForeignKey("NipedWebApi.Data.Model.Bloodwork", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.CholesterolGuideline", b =>
                {
                    b.HasOne("NipedWebApi.Data.Model.Guideline", "Guideline")
                        .WithOne("Cholesterol")
                        .HasForeignKey("NipedWebApi.Data.Model.CholesterolGuideline", "GuidelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guideline");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.Questionnaire", b =>
                {
                    b.HasOne("NipedWebApi.Data.Model.Client", "Client")
                        .WithOne("Questionnaire")
                        .HasForeignKey("NipedWebApi.Data.Model.Questionnaire", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.ValueGuideline", b =>
                {
                    b.HasOne("NipedWebApi.Data.Model.CholesterolGuideline", "CholesterolGuideline")
                        .WithMany("ValueGuidelines")
                        .HasForeignKey("CholesterolGuidelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CholesterolGuideline");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.CholesterolGuideline", b =>
                {
                    b.Navigation("ValueGuidelines");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.Client", b =>
                {
                    b.Navigation("Bloodwork");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("NipedWebApi.Data.Model.Guideline", b =>
                {
                    b.Navigation("Cholesterol");
                });
#pragma warning restore 612, 618
        }
    }
}
